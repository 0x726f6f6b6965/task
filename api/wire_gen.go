// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/0x726f6f6b6965/task/internal/config"
	"github.com/0x726f6f6b6965/task/internal/log"
	"github.com/0x726f6f6b6965/task/internal/services"
	"github.com/0x726f6f6b6965/task/internal/utils"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
)

// Injectors from wire.go:

func initApplication(ctx context.Context, cfg *config.Config) (*runtime.ServeMux, func(), error) {
	uint64_2 := generatorCfg(cfg)
	generator, err := utils.NewGenerator(uint64_2)
	if err != nil {
		return nil, nil, err
	}
	options := redisCfg(cfg)
	client, cleanup, err := redisClient(options)
	if err != nil {
		return nil, nil, err
	}
	configLog := logCfg(cfg)
	logger, cleanup2, err := log.NewLogger(configLog)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	taskServiceServer := services.NewTaskService(generator, client, logger)
	serveMux, err := newServer(ctx, taskServiceServer, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return serveMux, func() {
		cleanup2()
		cleanup()
	}, nil
}
